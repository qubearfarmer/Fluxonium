from scipy.optimize import curve_fit
import numpy as np
from matplotlib import pyplot as plt
from qutip import*
from Fluxonium_hamiltonians.Squid_small_junctions import bare_hamiltonian
#####################################################################################
######################################Data###########################################
#####################################################################################
current = []
freq = []

current_temp = np.array([ 29.49,  29.47,  29.39,  29.31,  29.23,  29.16,  29.07, 29.02,  28.91,  28.88,
  28.86,  28.83,  28.81,  28.8,   28.79,  28.74,  28.74,  28.72,  28.71,  28.7,   28.7,
  28.68,  28.68,  28.44,  28.43,  28.42,  28.4,   28.39,  28.38,  28.37,  28.36,
  28.36,  28.34,  28.32,  28.3,   28.28,  28.26,  28.22,  28.19,  28.08,  28.02,
  27.96,  27.9,   27.84]
)
freq_temp = np.array([ 3.07888274,  3.10784471,  3.17865846,  3.22597436,  3.23681812,  3.22320857,
  3.16459389,  3.11824053,  2.95300943,  2.88047903,  2.82613973,  2.72755895,
  2.64500435,  2.59857406,  2.54924519,  2.21633936,  2.2163394,   2.04476789,
  1.95202107,  1.85533752,  1.85091906,  1.64373926,  1.64429497,  1.47401488,
  1.66631586,  1.77094064,  1.97274242,  2.06573406 , 2.15365691,  2.23814375,
  2.31364724 , 2.3136059,   2.45072464 , 2.56460009 , 2.66056089 , 2.74271461,
  2.80908828,  2.91991385,  2.98801628 , 3.14554225 , 3.19727651 , 3.23425782,
  3.25317485,  3.25691738]
)

current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

current_temp = np.array([ 27.78 , 27.75 , 27.72  ,27.63 , 27.59,  27.54,  27.51,  27.5,   27.41,  27.39 ,
  27.37,  27.14 , 27.13 , 27.11,  27.1,   27.07 , 27.03 ,    27 ,   26.96 ,
  26.94,  26.91]

)
freq_temp = np.array([ 3.24242972 , 3.22979035,  3.20861888 , 3.1282661,  3.06436295  ,2.96457013 ,
  2.86313308 , 2.82206851,  2.23510137 , 2.00624104 , 1.79130058,  1.65934637 ,
  1.79404183,  2.06283957 , 2.19171163 , 2.54986395,  2.91141597,  3.08730759 ,
   3.24059697,  3.29833139,  3.37084768]

)

current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

current_temp = np.array([ 26.78 , 26.74 , 26.53 , 26.44,  26.37]
)
freq_temp = np.array([ 3.57758774 , 3.62154917,  3.75181656,  3.7706683,   3.76730393]
)

current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

current_temp = np.array([ 26.13 , 26.12 , 26.1,  26.09]
)
freq_temp = np.array([ 3.54407536,  3.49693351 , 3.34704922,  3.2380784]
)

current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

current_temp = np.array([ 25.68 , 25.63 , 25.59,  25.55]
)
freq_temp = np.array([ 3.31545838 , 3.85662582,  3.9756649,   4.04288432]
)

current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

clicked_array = np.array([
[28.431148, 1.623596],
[28.450572, 1.395260],
[28.489117, 0.971207],
[28.517343, 0.685786],
[28.537071, 0.547154],
[28.552853, 0.509098],
[28.582596, 0.653167],
[28.612340, 0.944024],
[28.666970, 1.552921],
[28.703087, 1.925327],
[28.737686, 2.224338]
])
current_temp = clicked_array[:,0]
freq_temp = clicked_array[:,1]
current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)

clicked_array = np.array([
[25.046997, 4.423790],
[24.943815, 4.439471],
[24.857083, 4.436858],
[24.822689, 4.405494],
[24.187150, 4.397653],
[24.176682, 4.483903],
[24.167710, 4.559697],
[24.152756, 4.635492],
[24.110885, 4.753104],
[24.043593, 4.821058],
[23.983777, 4.873331]
])
current_temp = clicked_array[:,0]
freq_temp = clicked_array[:,1]
current = np.append(current, current_temp)
freq = np.append(freq, freq_temp)
# array = np.array([
# [38.323589, 4.782484],
# [38.342809, 4.774688],
# [38.364651, 4.766892],
# [38.394355, 4.743503],
# [38.456384, 4.708420],
# [38.484341, 4.688929],
# [38.514046, 4.665541],
# [38.534140, 4.642152],
# [38.555108, 4.618763],
# [38.563844, 4.591476],
# [38.583065, 4.427755],
# [38.604032, 4.225052],
# [38.625000, 4.010655],
# [38.633737, 3.909304],
# [38.653831, 3.694906],
# [39.364987, 3.776767],
# [39.372849, 3.870322],
# [39.385081, 3.967775],
# [39.392944, 4.065229],
# [39.405175, 4.162682],
# [39.413038, 4.232848],
# [39.422648, 4.295218],
# [39.434005, 4.326403],
# [39.457594, 4.349792],
# [39.478562, 4.357588],
# [39.506519, 4.369283],
# [39.541465, 4.377079],
# [39.582527, 4.380977],
# [39.617339, 4.381250],
# [39.667419, 4.395313],
# [39.743629, 4.390625],
# [39.806774, 4.385938],
# [39.887339, 4.385938],
# [39.976613, 4.371875],
# [40.024516, 4.367188],
# [40.135565, 4.343750],
# [40.196532, 4.315625],
# [40.235726, 4.301563],
# [40.359839, 4.250000],
# [40.499194, 4.179688],
# [40.597177, 4.114063],
# [40.675565, 4.057813],
# [40.727823, 4.010938],
# [40.790968, 3.935938],
# [40.836694, 3.856250],
# [40.845403, 3.837500],
# [41.583871, 3.050000],
# [41.591935, 3.125000],
# [41.604839, 3.200000],
# [41.612903, 3.265625],
# [41.622581, 3.326563],
# [41.632258, 3.378125],
# [41.640323, 3.415625],
# [41.661290, 3.485938],
# [41.682258, 3.537500],
# [41.712903, 3.579688],
# [41.743548, 3.607813],
# [41.796774, 3.650000],
# [41.835484, 3.664063],
# [41.875806, 3.682813],
# [41.924194, 3.696875],
# [41.974194, 3.706250],
# [42.022581, 3.715625],
# [42.074194, 3.720313],
# [42.132258, 3.725000],
# [42.214516, 3.725000],
# [42.308065, 3.701563],
# [42.388710, 3.682813],
# [42.459677, 3.664063],
# [42.504839, 3.650000],
# [42.572581, 3.607813],
# [42.635484, 3.579688],
# [42.737097, 3.509375],
# [42.858065, 3.387500],
# [42.943548, 3.284375],
# [42.983871, 3.214063],
# [42.973871, 3.237500],
# [43.004032, 3.176563],
# [43.030645, 3.110938],
# [43.082097, 2.951563],
# [43.124677, 2.773438],
# [43.156613, 2.604688],
# [43.192097, 2.328125],
# [43.222258, 2.098438],
# [43.234677, 2.023438],
# [43.713710, 2.056250],
# [43.735000, 2.182812],
# [43.754516, 2.318750],
# [43.784677, 2.478125],
# [43.804194, 2.567188],
# [43.834355, 2.679688],
# [43.884032, 2.825000],
# [43.912419, 2.885938],
# [43.955000, 2.960938],
# [44.004677, 3.026563],
# [44.073871, 3.092188],
# [44.114677, 3.125000],
# [44.196290, 3.162500],
# [44.272581, 3.195312],
# [44.359516, 3.214063],
# [44.465968, 3.218750],
# [44.531613, 3.209375],
# [44.595484, 3.200000],
# [44.648710, 3.190625],
# [44.744516, 3.143750],
# [44.817258, 3.092188],
# [44.882903, 3.045313],
# [44.962742, 2.960938],
# [45.024677, 2.890625],
# [45.054839, 2.829688],
# [45.105565, 2.735938],
# [45.148065, 2.637500],
# [45.952823, 2.576563],
# [45.972016, 2.642188],
# [46.011774, 2.721875],
# [46.066613, 2.834375],
# [46.294194, 3.101562],
# [46.375081, 3.153125],
# [46.435403, 3.171875],
# [46.525887, 3.204688],
# [46.628710, 3.218750]
#
# ])
# current = array[:,0]
# freq = array[:,1]

flux_points = current*1e-3 #in mA
freq_points = freq #in GHz
plt.plot(current, freq, 'ro')

#####################################################################################
#######################################Fit###########################################
#####################################################################################
#Define constants
e = 1.602e-19    #Fundamental charge
h = 6.62e-34    #Placnk's constant
phi_o = h/(2*e) #Flux quantum

# Energy scale in GHz
N = 50
B_coeff = 95.75
E_l_guess = 0.722729827116
E_c_guess = 0.552669197076
E_j_sum_guess = 18#17.61374383
A_j_guess = 4.76321410213e-12  # in m
A_c_guess = 1.50075181762e-10
d_guess = 0.125005274368
offset_squid_guess = 0.129912406349
offset_ext_guess = 0.356925557542

guess = ([E_l_guess, E_c_guess, E_j_sum_guess, d_guess, A_j_guess, A_c_guess, offset_squid_guess, offset_ext_guess])
limits = ([0.0, 0.0, 0, 0, 0, -1, -1, -1], [1, 1, 30, np.inf, np.inf, 1, 1, 1])


def trans_energy(current, E_l, E_c, E_j_sum, d, A_j, A_c, offset_squid, offset_ext):
    energy = np.zeros(len(current))
    a = tensor(destroy(N))
    E_j1 = 0.5 * E_j_sum * (1 + d)
    E_j2 = 0.5 * E_j_sum * (1 - d)
    phi = (a + a.dag()) * (8.0 * E_c / E_l) ** (0.25) / np.sqrt(2.0)
    na = 1.0j * (a.dag() - a) * (E_l / (8 * E_c)) ** (0.25) / np.sqrt(2.0)
    flux_squid = current * B_coeff * A_j * 1e-4
    flux_ext = current * B_coeff * A_c * 1e-4
    phi_squid = 2.0 * np.pi * (flux_squid / phi_o - offset_squid)
    phi_ext = 2.0 * np.pi * (flux_ext / phi_o - offset_ext)
    for idx in range(len(current)):
        ope1 = 1.0j * (phi_ext[idx] - phi)
        ope2 = 1.0j * (phi + phi_squid[idx] - phi_ext[idx])
        H = 4.0 * E_c * na ** 2.0 + 0.5 * E_l * (phi) ** 2.0 - 0.5 * E_j1 * (ope1.expm() + (-ope1).expm()) - 0.5 * E_j2 * (ope2.expm() + (-ope2).expm())
        energy[idx] = H.eigenenergies()[1] - H.eigenenergies()[0]
    return energy

####################################################################################
####################################################################################
opt, cov = curve_fit(trans_energy, flux_points, freq_points, p0=guess)#, bounds = limits)
E_l_fit, E_c_fit, E_j_fit, d_fit, A_j_fit, A_c_fit, offset_squid_fit, offset_ext_fit = opt
print ('E_l=' + str(E_l_fit) + ', E_c=' + str(E_c_fit) + ', E_j_sum=' + str(E_j_fit) + '\n' + 'A_j=' + str(
   A_j_fit) + ', A_c=' + str(A_c_fit) + ', d=' + str(d_fit) + \
     ', beta_squid=' + str(offset_squid_fit) + ', beta_ext=' + str(offset_ext_fit))
current_nice = np.linspace(0.024,0.03, 601)
plt.plot(current_nice*1e3, trans_energy(current_nice, E_l_fit, E_c_fit, E_j_fit, d_fit, A_j_fit, A_c_fit, offset_squid_fit, offset_ext_fit))
plt.show()